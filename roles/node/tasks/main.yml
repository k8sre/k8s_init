- name: "安装依赖"
  yum:
    name: "{{ item.line }}"
    state: installed
  with_items:
    - {line: 'libnetfilter_conntrack-devel'}
    - {line: 'libnetfilter_conntrack'}
    - {line: 'conntrack-tools'}
    - {line: 'conntrack'}
    - {line: 'socat'}
    - {line: 'ipvsadm'}
  tags: node_app

- name: "创建kubernetes目录"
  file:
    path: "{{ item.line }}"
    state: directory
    mode: '0755'
  with_items:
    - {line: '/etc/kubernetes/pki'}
    - {line: '/etc/kubernetes/manifests'}
    - {line: "{{ kubernetes.kubelet_dir }}"}
    - {line: '/opt/cni/bin'}
  tags: dir

- name: Get cni-plugins
  get_url:
    url: "{{ kube_down_url }}/cni-plugins/{{kubernetes.cni_plugins_version}}/cni-plugins-linux-amd64-{{kubernetes.cni_plugins_version}}.tgz"
    dest: /tmp/
  tags: cni_plugins

- name: Install cni-plugins
  unarchive:
    src: "/tmp/cni-plugins-linux-amd64-{{kubernetes.cni_plugins_version}}.tgz"
    dest: /opt/cni/bin
    remote_src: yes
  tags: cni_plugins

- name: "安装node节点"
  get_url:
    url: "{{ item.line }}"
    dest: /usr/bin/
  with_items:
    - { line: "{{ kube_down_url }}/{{ kubernetes.version }}/kubelet"}
    - { line: "{{ kube_down_url }}/{{ kubernetes.version }}/kube-proxy"}
  tags: kube_node

- name: "添加执行权限"
  file:
    dest: "{{ item.line }}"
    mode: 0755
  with_items:
    - {line: '/usr/bin/kubelet'}
    - {line: '/usr/bin/kube-proxy'}
  tags: kube_node

- name: "分发node证书文件"
  copy:
    src: "{{ item.line }}"
    dest: "/etc/kubernetes/pki/"
    mode: 0640
  with_items:
    - {line: "{{ cert.dir }}/ca.pem"}
    - {line: "{{ cert.dir }}/ca.key"}
    - {line: "{{ cert.dir }}/{{ ansible_default_ipv4.address }}/kube-proxy.pem"}
    - {line: "{{ cert.dir }}/{{ ansible_default_ipv4.address }}/kube-proxy.key"}
    - {line: "{{ cert.dir }}/token"}
  tags: dis_certs

- name: "读取当前bootstrap-token"
  shell: cat /etc/kubernetes/pki/token | grep -v "^#" | awk -F '.' '{print $1}'
  register: token_id
  tags: dis_node_config

- name: "读取当前bootstrap-token-secret"
  shell: cat /etc/kubernetes/pki/token | grep -v "^#" | awk -F '.' '{print $2}'
  register: token_secret
  tags: dis_node_config

- name: "生成kubelet配置文件"
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - {src: "bootstrap.kubeconfig.j2",dest: "/etc/kubernetes/bootstrap.kubeconfig" }
    - {src: "proxy.kubeconfig.j2",dest: "/etc/kubernetes/proxy.kubeconfig" }
    - {src: "kubelet.service.j2",dest: "/usr/lib/systemd/system/kubelet.service" }
    - {src: "kube-proxy.service.j2",dest: "/usr/lib/systemd/system/kube-proxy.service" }
    - {src: "kubelet.conf.j2",dest: "/etc/kubernetes/kubelet.conf" }
    - {src: "10-kubelet.conf.j2",dest: "/etc/sysconfig/kubelet" }
    - {src: "kube-proxy.conf.j2",dest: "/etc/kubernetes/kube-proxy.conf" }
  tags: dis_node_config

- name: "检查是否存在bootstrap-token"
  shell: kubectl -n kube-system get secret bootstrap-token-{{ token_id.stdout }}
  ignore_errors: yes
  delegate_to: "{{ groups['master'][0] }}"
  run_once: true
  register: bootstrap_token_ready
  tags: bootstrap

- name: "创建bootstrap-token secret"
  when: bootstrap_token_ready.rc != 0
  shell: kubectl -n kube-system create secret generic bootstrap-token-{{ token_id.stdout }} --type 'bootstrap.kubernetes.io/token' --from-literal description="cluster bootstrap token" --from-literal token-id={{ token_id.stdout }} --from-literal token-secret={{ token_secret.stdout }} --from-literal usage-bootstrap-authentication=true --from-literal usage-bootstrap-signing=true
  delegate_to: "{{ groups['master'][0] }}"
  run_once: true
  tags: bootstrap

- name: "检查 clusterrolebinding kubelet-bootstrap 是否存在"
  shell: kubectl get clusterrolebinding kubelet-bootstrap
  ignore_errors: yes
  delegate_to: "{{ groups['master'][0] }}"
  run_once: true
  register: kubelet_bootstrap_ready
  tags: bootstrap

- name: "创建 clusterrolebinding kubelet-bootstrap"
  when: kubelet_bootstrap_ready.rc != 0
  shell: kubectl create clusterrolebinding kubelet-bootstrap --clusterrole=system:node-bootstrapper --group=system:bootstrappers
  delegate_to: "{{ groups['master'][0] }}"
  run_once: true
  tags: bootstrap

- name: "检查 node-autoapprove-bootstrap 是否存在"
  shell: kubectl get clusterrolebinding node-autoapprove-bootstrap
  ignore_errors: yes
  delegate_to: "{{ groups['master'][0] }}"
  run_once: true
  register: node_autoapprove_bootstrap_ready
  tags: bootstrap

- name: "创建 clusterrolebinding node-autoapprove-bootstrap"
  when: node_autoapprove_bootstrap_ready.rc != 0
  shell: kubectl create clusterrolebinding node-autoapprove-bootstrap --clusterrole=system:certificates.k8s.io:certificatesigningrequests:nodeclient --group=system:bootstrappers
  delegate_to: "{{ groups['master'][0] }}"
  run_once: true
  tags: bootstrap

- name: "检查 clusterrolebinding node-autoapprove-certificate-rotation 是否存在"
  shell: kubectl get clusterrolebinding node-autoapprove-certificate-rotation
  ignore_errors: yes
  delegate_to: "{{ groups['master'][0] }}"
  run_once: true
  register: node_autoapprove_certificate_rotation_ready
  tags: bootstrap

- name: "创建 clusterrolebinding node-autoapprove-certificate-rotation"
  when: node_autoapprove_certificate_rotation_ready.rc != 0
  shell: kubectl create clusterrolebinding node-autoapprove-certificate-rotation --clusterrole=system:certificates.k8s.io:certificatesigningrequests:selfnodeclient --group=system:nodes
  delegate_to: "{{ groups['master'][0] }}"
  run_once: true
  tags: bootstrap

- name: "删除bootstrap-token文件"
  file:
    path: "/etc/kubernetes/pki/token"
    state: absent

- name: "重启kubelet"
  systemd:
    name: kubelet
    state: restarted
    daemon_reload: yes
    enabled: yes
  tags: restart_kubelet

- name: "等待kubelet启动成功"
  wait_for:
    host: "{{ ansible_default_ipv4.address }}"
    port: 10250
    delay: 5
    sleep: 2
  tags: healthcheck

- name: "kubelet健康检查"
  uri:
    url: "http://{{ ansible_default_ipv4.address }}:10248/healthz"
    return_content: yes
    validate_certs: no
  register: kubelet
  failed_when: "'ok' not in kubelet.content"
  connection: local
  tags: healthcheck

- name: "重启kube-proxy"
  systemd:
    name: kube-proxy
    state: restarted
    daemon_reload: yes
    enabled: yes
  tags: restart_proxy

- name: "等待kube-proxy启动成功"
  wait_for:
    host: "{{ ansible_default_ipv4.address }}"
    port: 10256
    delay: 5
    sleep: 2
  tags: healthcheck

- name: "kube-proxy健康检查"
  uri:
    url: "http://{{ ansible_default_ipv4.address }}:10256/healthz"
    return_content: yes
    validate_certs: no
    status_code: 200
  register: proxy
  connection: local
  tags: healthcheck

- name: "为master节点打污点"
  shell: "kubectl taint nodes {{ item }} node-role.kubernetes.io/master=:NoSchedule"
  delegate_to: "{{ groups['master'][0] }}"
  run_once: true
  with_items:
    - "{{ groups['master'] }}"
  tags: create_label

- name: "为master节点打标签"
  shell: "kubectl label nodes {{ item }} node-role.kubernetes.io/master="
  delegate_to: "{{ groups['master'][0] }}"
  run_once: true
  with_items:
    - "{{ groups['master'] }}"
  tags: create_label

- name: "为node节点打标签"
  shell: "kubectl label nodes {{ item }} node-role.kubernetes.io/node="
  delegate_to: "{{ groups['master'][0] }}"
  run_once: true
  with_items:
    - "{{ groups['node'] }}"
  tags: create_label
